snippet Geometry
abbr 平面幾何ライブラリ
    typedef long double LD;
    typedef complex<LD> Point;
    typedef pair<Point, Point> Line;
    const LD EPS = 1e-10;
    #define X real() // x座標を取得
    #define Y imag() // y座標を取得
    #define LE(n,m) ((n) < (m) + EPS)
    #define GE(n,m) ((n) + EPS > (m))
    #define EQ(n,m) (abs((n)-(m)) < EPS)

    // 内積 dot(a, b) = |a||b|cosθ
    LD dot(Point a, Point b){
        return (conj(a)*b).X;
    }

    // 外積 cross(a, b) = |a||b|sinθ
    LD cross(Point a, Point b){
        return (conj(a)*b).Y;
    }

    int ccw(Point a, Point b, Point c){
        b -= a; c -= a;
        if (cross(b, c) > 0)   return +1;       // counter clockwise
        if (cross(b, c) < 0)   return -1;       // clockwise
        if (dot(b, c) < 0)     return +2;       // c--a--b on line
        if (norm(b) < norm(c)) return -2;       // a--b--c on line
        return 0;
    }


    // 交差判定 (isec) ****************************
    // 点　 := 平面座標にある点
    // 直線 := 点と点を通るどこまでも続く線
    // 線分 := 点と点を結んでその両端で止まっている線

    // 直線と点
    bool isecLP(Point a1, Point a2, Point b){
        return abs(ccw(a1, a2, b)) != 1;
    }

    // 直線と直線
    bool isecLL(Point a1, Point a2, Point b1, Point b2) {
        return !isecLP(a2-a1, b2-b1, 0) || isecLP(a1, b1, b2);
    }

    // 直線と線分
    bool isecLS(Point a1, Point a2, Point b1, Point b2) {
        return cross(a2-a1, b1-a1) * cross(a2-a1, b2-a1) < EPS;
    }

    // 線分と線分
    bool isecSS(Point a1, Point a2, Point b1, Point b2) {
        return ccw(a1, a2, b1)*ccw(a1, a2, b2) <= 0 && ccw(b1, b2, a1)*ccw(b1, b2, a2) <= 0;
    }

    // 線分と点
    bool isecSP(Point a1, Point a2, Point b) {
        return !ccw(a1, a2, b);
    }

    // ********************************************


    // 距離 (dist) ********************************
    // 点pの直線aへの射影点を返す
    Point proj(Point a1, Point a2, Point p){
        return a1 + dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);
    }

    // 点pの直線aへの反射点を返す
    Point reflection(Point a1, Point a2, Point p){
        return 2.0L*proj(a1, a2, p) - p;
    }

    // 直線と点
    LD distLP(Point a1, Point a2, Point p){
        return abs(proj(a1, a2, p) - p);
    }

    // 直線と直線
    LD distLL(Point a1, Point a2, Point b1, Point b2) {
        return isecLL(a1, a2, b1, b2) ? 0 : distLP(a1, a2, b1);
    }

    // 直線と線分
    LD distLS(Point a1, Point a2, Point b1, Point b2) {
        return isecLS(a1, a2, b1, b2) ? 0 : min(distLP(a1, a2, b1), distLP(a1, a2, b2));
    }

    // 線分と点
    LD distSP(Point a1, Point a2, Point p) {
        Point r = proj(a1, a2, p);
        if(isecSP(a1, a2, r)) return abs(r-p);
        return min(abs(a1-p), abs(a2-p));
    }

    // 線分と線分
    LD distSS(Point a1, Point a2, Point b1, Point b2) {
        if(isecSS(a1, a2, b1, b2)) return 0;
        return min(min(distSP(a1, a2, b1), distSP(a1, a2, b2)), min(distSP(b1, b2, a1), distSP(b1, b2, a2)));
    }

    // ********************************************


    // 2直線の交点 (crosspoint) *******************
    Point crosspointLL(Point a1, Point a2, Point b1, Point b2){
        LD d1 = cross(b2-b1, b1-a1);
        LD d2 = cross(b2-b1, a2-a1);
        if (EQ(d1, 0) && EQ(d2, 0)) return a1;
        if (EQ(d2, 0)) throw "not exist crosspoint";
        return a1 + d1/d2 * (a2-a1);
    }
    // ********************************************
