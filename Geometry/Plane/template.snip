snippet Geometry
abbr 平面幾何テンプレート
 typedef long double LD;
 typedef complex<LD> Point;
 typedef pair<Point, Point> Line;
 typedef vector<Point> Polygon;
 const LD EPS = 1e-10;
 #define X real() // x座標を取得
 #define Y imag() // y座標を取得
 #define LE(n,m) ((n) < (m) + EPS)
 #define GE(n,m) ((n) + EPS > (m))
 #define EQ(n,m) (abs((n)-(m)) < EPS)
 
 // 内積 Dot(a, b) = |a||b|cosθ
 LD Dot(Point a, Point b){
     return (conj(a)*b).X;
 }
 
 // 外積 Cross(a, b) = |a||b|sinθ
 LD Cross(Point a, Point b){
     return (conj(a)*b).Y;
 }
 
 int CCW(Point a, Point b, Point c){
     b -= a; c -= a;
     if (Cross(b, c) > 0)   return +1;       // counter clockwise
     if (Cross(b, c) < 0)   return -1;       // clockwise
     if (Dot(b, c) < 0)     return +2;       // c--a--b on line
     if (norm(b) < norm(c)) return -2;       // a--b--c on line
     return 0;
 }
 
 //*********************************************
 //          点と線(Point and Line)            *
 //*********************************************
 
 // 交差判定 (Isec) ****************************
 // 点　 := 平面座標にある点
 // 直線 := 点と点を通るどこまでも続く線
 // 線分 := 点と点を結んでその両端で止まっている線
 
 // 直線と点
 bool IsecLP(Point a1, Point a2, Point b){
     return abs(CCW(a1, a2, b)) != 1;
 }
 
 // 直線と直線
 bool IsecLL(Point a1, Point a2, Point b1, Point b2) {
     return !IsecLP(a2-a1, b2-b1, 0) || IsecLP(a1, b1, b2);
 }
 
 // 直線と線分
 bool IsecLS(Point a1, Point a2, Point b1, Point b2) {
     return Cross(a2-a1, b1-a1) * Cross(a2-a1, b2-a1) < EPS;
 }
 
 // 線分と線分
 bool IsecSS(Point a1, Point a2, Point b1, Point b2) {
     return CCW(a1, a2, b1)*CCW(a1, a2, b2) <= 0 && CCW(b1, b2, a1)*CCW(b1, b2, a2) <= 0;
 }
 
 // 線分と点
 bool IsecSP(Point a1, Point a2, Point b) {
     return !CCW(a1, a2, b);
 }
 // ********************************************
 
 
 // 距離 (Dist) ********************************
 // 点pの直線aへの射影点を返す
 Point Proj(Point a1, Point a2, Point p){
     return a1 + Dot(a2-a1, p-a1) / norm(a2-a1) * (a2-a1);
 }
 
 // 点pの直線aへの反射点を返す
 Point Reflection(Point a1, Point a2, Point p){
     return 2.0L*Proj(a1, a2, p) - p;
 }
 
 // 直線と点
 LD DistLP(Point a1, Point a2, Point p){
     return abs(Proj(a1, a2, p) - p);
 }
 
 // 直線と直線
 LD DistLL(Point a1, Point a2, Point b1, Point b2) {
     return IsecLL(a1, a2, b1, b2) ? 0 : DistLP(a1, a2, b1);
 }
 
 // 直線と線分
 LD DistLS(Point a1, Point a2, Point b1, Point b2) {
     return IsecLS(a1, a2, b1, b2) ? 0 : min(DistLP(a1, a2, b1), DistLP(a1, a2, b2));
 }
 
 // 線分と点
 LD DistSP(Point a1, Point a2, Point p) {
     if(Dot(a2-a1,p-a1) < EPS) return abs(p-a1);
     if(Dot(a1-a2,p-a2) < EPS) return abs(p-a2);
     return abs(Cross(a2-a1,p-a1)) / abs(a2-a1);
 }
 
 // 線分と線分
 LD DistSS(Point a1, Point a2, Point b1, Point b2) {
     if(IsecSS(a1, a2, b1, b2)) return 0;
     return min(min(DistSP(a1, a2, b1), DistSP(a1, a2, b2)), min(DistSP(b1, b2, a1), DistSP(b1, b2, a2)));
 }
 // ********************************************
 
 
 // 2直線の交点 (crosspoint) *******************
 Point CrossPointLL(Point a1, Point a2, Point b1, Point b2){
     LD d1 = Cross(b2-b1, b1-a1);
     LD d2 = Cross(b2-b1, a2-a1);
     if (EQ(d1, 0) && EQ(d2, 0)) return a1;
     if (EQ(d2, 0)) throw "not exist crosspoint";
     return a1 + d1/d2 * (a2-a1);
 }
 // ********************************************
